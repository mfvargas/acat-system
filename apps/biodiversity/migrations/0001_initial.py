# Generated by Django 5.0 on 2025-07-28 02:26

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataImportLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_type', models.CharField(choices=[('species', 'Importación de Especies'), ('occurrences', 'Importación de Registros'), ('full', 'Importación Completa')], max_length=20, verbose_name='Tipo de Importación')),
                ('status', models.CharField(choices=[('STARTED', 'Iniciado'), ('SUCCESS', 'Exitoso'), ('ERROR', 'Error'), ('PARTIAL', 'Parcial')], default='STARTED', max_length=10, verbose_name='Estado')),
                ('records_processed', models.IntegerField(default=0, verbose_name='Registros Procesados')),
                ('records_created', models.IntegerField(default=0, verbose_name='Registros Creados')),
                ('records_updated', models.IntegerField(default=0, verbose_name='Registros Actualizados')),
                ('records_errors', models.IntegerField(default=0, verbose_name='Errores')),
                ('source_file', models.CharField(max_length=500, verbose_name='Archivo Fuente')),
                ('file_size', models.BigIntegerField(null=True, verbose_name='Tamaño del Archivo')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Iniciado')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completado')),
                ('duration_seconds', models.IntegerField(null=True, verbose_name='Duración (segundos)')),
                ('log_messages', models.TextField(blank=True, verbose_name='Mensajes de Log')),
                ('error_details', models.TextField(blank=True, verbose_name='Detalles de Errores')),
            ],
            options={
                'verbose_name': 'Log de Importación',
                'verbose_name_plural': 'Logs de Importación',
                'db_table': 'biodiversity_data_import_log',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxon_key', models.BigIntegerField(db_index=True, help_text='Unique identifier from GBIF', unique=True, verbose_name='Taxon Key (GBIF)')),
                ('kingdom', models.CharField(max_length=100, verbose_name='Reino')),
                ('phylum', models.CharField(max_length=100, verbose_name='Filo')),
                ('class_name', models.CharField(db_column='class', max_length=100, verbose_name='Clase')),
                ('order', models.CharField(max_length=100, verbose_name='Orden')),
                ('family', models.CharField(db_index=True, max_length=100, verbose_name='Familia')),
                ('genus', models.CharField(db_index=True, max_length=100, verbose_name='Género')),
                ('species', models.CharField(max_length=200, verbose_name='Especie')),
                ('scientific_name', models.CharField(help_text='Generated from genus + species', max_length=300, verbose_name='Nombre Científico')),
                ('common_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nombre Común')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_gbif_update', models.DateTimeField(blank=True, null=True, verbose_name='Última actualización GBIF')),
            ],
            options={
                'verbose_name': 'Especie',
                'verbose_name_plural': 'Especies',
                'db_table': 'biodiversity_species',
                'ordering': ['family', 'genus', 'species'],
                'indexes': [models.Index(fields=['family', 'genus'], name='biodiversit_family_2200bc_idx'), models.Index(fields=['kingdom', 'phylum', 'class_name'], name='biodiversit_kingdom_8fa54b_idx')],
            },
        ),
        migrations.CreateModel(
            name='ConservationStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rlcvs_status', models.CharField(choices=[('PE', 'En peligro de extinción'), ('PRA', 'Población reducida o amenazada'), ('NR', 'No registrada en lista')], default='NR', max_length=3, verbose_name='Estado RLCVS')),
                ('cites_status', models.CharField(choices=[('AI', 'Apéndice I'), ('AII', 'Apéndice II'), ('AIII', 'Apéndice III'), ('NONE', 'No listada en CITES')], default='NONE', max_length=4, verbose_name='Estado CITES')),
                ('iucn_status', models.CharField(choices=[('CR', 'En peligro crítico'), ('EN', 'En peligro'), ('VU', 'Vulnerable'), ('NT', 'Casi amenazada'), ('LC', 'Preocupación menor'), ('DD', 'Datos insuficientes'), ('NE', 'No evaluada')], default='NE', max_length=2, verbose_name='Estado UICN')),
                ('endemic_to_acat', models.BooleanField(default=False, verbose_name='Endémica del ACAT')),
                ('notes', models.TextField(blank=True, verbose_name='Notas adicionales')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='conservation_status', to='biodiversity.species', verbose_name='Especie')),
            ],
            options={
                'verbose_name': 'Estado de Conservación',
                'verbose_name_plural': 'Estados de Conservación',
                'db_table': 'biodiversity_conservation_status',
            },
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gbif_id', models.BigIntegerField(db_index=True, help_text='Unique occurrence identifier from GBIF', unique=True, verbose_name='GBIF ID')),
                ('dataset_key', models.CharField(max_length=100, verbose_name='Dataset Key')),
                ('occurrence_id', models.CharField(max_length=200, verbose_name='Occurrence ID')),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='Coordinates in WGS84 (EPSG:4326)', srid=4326, verbose_name='Ubicación')),
                ('decimal_longitude', models.DecimalField(decimal_places=7, max_digits=10, verbose_name='Longitud Decimal')),
                ('decimal_latitude', models.DecimalField(decimal_places=7, max_digits=10, verbose_name='Latitud Decimal')),
                ('scientific_name', models.CharField(max_length=300, verbose_name='Nombre Científico')),
                ('taxon_rank', models.CharField(blank=True, max_length=50, verbose_name='Rango Taxonómico')),
                ('country_code', models.CharField(default='CR', max_length=2, verbose_name='Código de País')),
                ('state_province', models.CharField(blank=True, max_length=100, verbose_name='Provincia')),
                ('locality', models.TextField(blank=True, verbose_name='Localidad')),
                ('basis_of_record', models.CharField(blank=True, max_length=50, verbose_name='Tipo de Registro')),
                ('institution_code', models.CharField(blank=True, max_length=100, verbose_name='Código de Institución')),
                ('collection_code', models.CharField(blank=True, max_length=100, verbose_name='Código de Colección')),
                ('event_date', models.DateField(blank=True, null=True, verbose_name='Fecha del Evento')),
                ('year', models.IntegerField(blank=True, null=True, verbose_name='Año')),
                ('month', models.IntegerField(blank=True, null=True, verbose_name='Mes')),
                ('day', models.IntegerField(blank=True, null=True, verbose_name='Día')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_gbif_update', models.DateTimeField(blank=True, null=True, verbose_name='Última actualización GBIF')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='occurrences', to='biodiversity.species', verbose_name='Especie')),
            ],
            options={
                'verbose_name': 'Registro de Presencia',
                'verbose_name_plural': 'Registros de Presencia',
                'db_table': 'biodiversity_occurrence',
                'ordering': ['-event_date', '-created_at'],
                'indexes': [models.Index(fields=['species', 'event_date'], name='biodiversit_species_be8ec8_idx'), models.Index(fields=['country_code', 'state_province'], name='biodiversit_country_f08c49_idx'), models.Index(fields=['year', 'month'], name='biodiversit_year_9c7893_idx')],
            },
        ),
    ]
